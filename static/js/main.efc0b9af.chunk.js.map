{"version":3,"sources":["components/EditableSpan.tsx","components/input.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["EditableSpan","props","useState","title","newTitle","setNewTitle","edit","setEdit","onDobleClicHandler","callBack","autoFocus","onBlur","value","onChange","e","currentTarget","console","log","onDoubleClick","Input","setTitle","error","setError","addTask","trim","onKeyPress","charCode","className","onClick","Todolist","editTodoList","id","removeTodoList","todoListID","tasks","map","t","key","isDone","type","changeTaskStatus","checked","taskID","editTask","editTaskHandler","removeTask","filter","changeFilter","App","todoListID1","v1","todoListID2","todoLists","setTodoLists","setTasks","el","taskId","task","todoListTasks","changeStatus","newID","index","tasksForTodoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.efc0b9af.chunk.js","sourcesContent":["import React, { ChangeEvent,useState } from \"react\";\r\n\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    callBack: (newTitle:string) => void\r\n};\r\n\r\nexport const EditableSpan =(props:EditableSpanPropsType) => {\r\n    let [newTitle, setNewTitle] = useState(props.title)\r\n\r\n        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitle(e.currentTarget.value)\r\n        console.log ()\r\n    }\r\n\r\n\r\n       const addTitle = () => {\r\n        \r\n        if (newTitle!== \"\") {\r\n            props. callBack (newTitle);\r\n           \r\n    }\r\n}\r\n\r\n\r\n    const [edit,setEdit]= useState (false)\r\n    const onDobleClicHandler =() => {\r\n          setEdit(!edit)\r\n          addTitle ()\r\n    }\r\n    return (\r\n        edit\r\n        ? <input autoFocus onBlur={onDobleClicHandler} value={newTitle} onChange ={onChangeHandler}/>\r\n        : <span onDoubleClick={onDobleClicHandler}>{props.title}</span>\r\n    );\r\n};\r\n\r\n\r\n","import { type } from \"os\";\r\nimport React, { KeyboardEvent,ChangeEvent, useState } from \"react\";\r\n\r\n type InputPropsType = {\r\n    callBack: (newTitle:string)=> void\r\n}\r\n\r\n \r\n\r\nexport const Input =(props:InputPropsType) => {\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        console.log ()\r\n    }\r\n\r\n    const addTask = () => {\r\n        let newTitle = title.trim();\r\n        if (title.trim() !== \"\") {\r\n            props. callBack (newTitle);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addTask();\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <input value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   className={error ? \"error\" : \"\"}\r\n            />\r\n            <button onClick={addTask}>+</button>\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n        </div>\r\n    )\r\n}","\r\nimport React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport { EditableSpan } from './components/EditableSpan';\r\nimport { Input } from './components/input';\r\n\r\n\r\ntype TaskType = {\r\n\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n    \r\n}\r\n\r\ntype PropsType = {\r\n\r\n    id: string\r\n    todoListID: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (todoListID:string, taskId: string) => void\r\n    changeFilter: (todoListID:string,value: FilterValuesType) => void\r\n    addTask: (todoListID: string, title: string) => void\r\n    changeTaskStatus: (todoListID:string, taskId: string, isDone: boolean) => void\r\n    filter: FilterValuesType\r\n    removeTodoList: (todoListID: string) =>void\r\n    editTask:(todoListID: string, taskId: string, newTitle: string)=>void\r\n    editTodoList:(todoListID: string,newTitle: string)=> void\r\n   \r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n \r\n\r\n    const onAllClickHandler = () => props.changeFilter(props.todoListID,\"all\");\r\n    const onActiveClickHandler = () => props.changeFilter(props.todoListID,\"active\");\r\n    const onCompletedClickHandler = () => props.changeFilter(props.todoListID,\"completed\");\r\n\r\n    const removeTodoListHandler =() => {\r\n        props.removeTodoList(props.todoListID)\r\n\r\n    }\r\n\r\n    const addTaskHandler =(newTitle: string) => {\r\n        props.addTask(newTitle, props.id)\r\n    }\r\n\r\n    const editTaskHandler=(taskID:string, newTitle:string)=> {\r\n        props.editTask(props.id,taskID,newTitle)\r\n    }\r\n\r\n    const editTodoListHendler =(newTitle: string)=> {\r\n        props.editTodoList(props.id,newTitle)\r\n    }\r\n\r\n\r\n    return <div>\r\n        <h3>\r\n            {/*{props.title}*/}\r\n            <EditableSpan title={props.title} callBack= {editTodoListHendler}/>\r\n            <button onClick={removeTodoListHandler}>X</button>\r\n            </h3>\r\n            <Input callBack = {addTaskHandler}/>\r\n\r\n\r\n\r\n        <ul>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(props.todoListID,t.id)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        props.changeTaskStatus(props.todoListID,t.id, e.currentTarget.checked);\r\n                    }\r\n\r\n                    return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <input type=\"checkbox\"\r\n                               onChange={onChangeHandler}\r\n                               checked={t.isDone}/>\r\n                              \r\n                        <EditableSpan title= {t.title} callBack = { (newTitle)=>editTaskHandler(t.id,newTitle)}/>\r\n                        <button onClick={onClickHandler}>x</button>\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <button className={props.filter === 'all' ? \"active-filter\" : \"\"}\r\n                    onClick={onAllClickHandler}>All</button>\r\n            <button className={props.filter === 'active' ? \"active-filter\" : \"\"}\r\n                onClick={onActiveClickHandler}>Active</button>\r\n            <button className={props.filter === 'completed' ? \"active-filter\" : \"\"}\r\n                onClick={onCompletedClickHandler}>Completed</button>\r\n        </div>\r\n    </div>\r\n}","\r\nimport React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport { TLSSocket } from 'tls';\r\nimport { Input } from './components/input';\r\nimport { EditableSpan } from './components/EditableSpan';\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\ntype TodoListsType= {\r\n    id:string,\r\n    title:string,\r\n    filter:FilterValuesType\r\n}\r\n\r\nfunction App() {\r\n    let todoListID1=v1();\r\n    let todoListID2=v1();\r\n    \r\n\r\n    let [todoLists, setTodoLists] = useState<Array<TodoListsType>> ([\r\n        {id:todoListID1, title:'What to learn', filter:'all'},\r\n        {id:todoListID2,title:'What to buy', filter:'all'},\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState({\r\n        [todoListID1]:[\r\n        {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n        {id: v1(), title: \"JS\", isDone: true},\r\n        {id: v1(), title: \"ReactJS\", isDone: false},\r\n        {id: v1(), title: \"Rest API\", isDone: false},\r\n        {id: v1(), title: \"GraphQL\", isDone: false},\r\n    ],\r\n        [todoListID2] : [\r\n            {id: v1(), title: \"HTML&CSS2\", isDone: true},\r\n            {id: v1(), title: \"JS2\", isDone: true},\r\n            {id: v1(), title: \"ReactJS2\", isDone: false},\r\n            {id: v1(), title: \"Rest API2\", isDone: false},\r\n            {id: v1(), title: \"GraphQL2\", isDone: false},\r\n            \r\n        ]\r\n});\r\n\r\n\r\n    const editTodoList = (todoListID: string,newTitle: string) => {\r\n        setTodoLists(todoLists.map(el=>el.id ===todoListID ? {...el, title:newTitle} :el))\r\n\r\n    }\r\n\r\n\r\n    // подключение EditableSpan\r\n\r\n    const editTask=(todoListID: string, taskId: string, newTitle: string) => {\r\n        console.log ({...tasks, [todoListID]:tasks[todoListID].map(el=>el.id===taskId ?{...el,title:newTitle} : el)})\r\n    }\r\n    \r\n    //\r\n\r\n    const addTodoList = (newTitle: string,) => {\r\n\r\n        let newID =v1 ()\r\n        let newTodoList: TodoListsType = {id: newID, title: newTitle, filter:'all'};\r\n\r\n        setTodoLists([newTodoList,... todoLists])\r\n         setTasks( {...tasks, [newID]:[]})\r\n\r\n    }\r\n\r\n    const removeTodoList =(todoListID:string,) =>{\r\n        setTodoLists(todoLists.filter (el=>el.id! ===todoListID))\r\n        delete tasks [todoListID]\r\n        console.log(tasks)\r\n\r\n    }\r\n\r\n    function removeTask(todoListID:string,taskId: string) {\r\n       setTasks({...tasks, [todoListID] : tasks [todoListID] . filter(el=> el.id !== taskId)})\r\n       // let filteredTasks = tasks.filter(t => t.id != id);\r\n       // setTasks(filteredTasks);\r\n    }\r\n\r\n    function addTask(title: string, todoListID: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        let todoListTasks = tasks [todoListID];\r\n        tasks[todoListID] = [task, ... todoListTasks];\r\n        //setTasks({...tasks, [todoListID]: [newTask,...tasks[todoListID]]})\r\n        //let task = {id: v1(), title: title, isDone: false};\r\n        //let newTasks = [task, ...tasks];\r\n       // setTasks(newTasks);\r\n    }\r\n\r\n   \r\n\r\n    function changeStatus(todoListID:string, taskId: string, isDone: boolean) {\r\n        setTasks({...tasks, [todoListID] : tasks [todoListID].map(el=>el.id === taskId ? {...el, isDone: isDone} : el)})\r\n        //let task = tasks.find(t => t.id === taskId);\r\n       // if (task) {\r\n           // task.isDone = isDone;\r\n        }\r\n\r\n       // setTasks([...tasks]);\r\n    \r\n\r\n\r\n   \r\n\r\n    function changeFilter(todoListID:string,value: FilterValuesType) {\r\n       // setTodoList (todoLists.map (el =>el.id === todoListID ? {...el, filter: value} : el ));\r\n       // setFilter(value); \r\n    }\r\n    \r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <Input callBack ={addTodoList}/>\r\n\r\n               {todoLists.map((el: TodoListsType  ,index: number)=>{\r\n                let tasksForTodoList = tasks[el.id];\r\n                if (el.filter === \"active\") {\r\n                    tasksForTodoList = tasks[el.id].filter (t => t.isDone === false);\r\n                }\r\n                if (el.filter === \"completed\") {\r\n                    tasksForTodoList = tasks [el.id].filter (t => t.isDone === true)\r\n                }\r\n                return(\r\n                    \r\n                    <Todolist \r\n                    key= {el.id}\r\n                    id= {el. id}\r\n                    todoListID={el.id}\r\n                    title={el.title}\r\n                    tasks={tasksForTodoList}\r\n                    removeTask={removeTask}\r\n                    changeFilter={changeFilter}\r\n                    addTask={addTask}\r\n                    changeTaskStatus={changeStatus}\r\n                    filter={el.filter}\r\n                    removeTodoList= {removeTodoList}\r\n                    editTask= {editTask}\r\n                    editTodoList = { editTodoList }\r\n                    \r\n                     />\r\n\r\n                    \r\n                )\r\n\r\n            })} \r\n                 \r\n            \r\n                    \r\n        </div>\r\n    )}\r\n\r\n        \r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}